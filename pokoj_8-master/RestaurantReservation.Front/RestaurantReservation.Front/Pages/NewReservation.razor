@page "/new-reservation"
@inject HttpClient Http
@inject NavigationManager Navigation
@using RestaurantReservation.Front.Models
@using System.Globalization
@inject IJSRuntime JsRuntime
@using System.Text.Json

<h3>Dodaj nową rezerwację</h3>

<EditForm Model="@newReservation" OnValidSubmit="CreateReservation">
    <div class="form-group">
        <label for="date">Data:</label>
        <InputDate id="date" class="form-control" @bind-Value="newReservation.ReservationDate" />
    </div>
    <div class="form-group">
        <label for="time">Czas:</label>
        <InputText id="time" class="form-control" @bind-Value="timeString" />
        @if (timeParsingError)
        {
        <div class="text-danger">Zły format godziny</div>
        }
    </div>
    <div class="form-group">
        <label for="people">Ilość osób:</label>
        <InputNumber id="people" class="form-control" @bind-Value="newReservation.NumberOfPeople" />
    </div>
    <div class="form-group">
        <label for="preferences">Preferencje:</label>
        <InputText id="preferences" class="form-control" @bind-Value="newReservation.Preferences" />
    </div>
    <button type="submit" class="btn btn-primary">Dodaj</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Anuluj</button>
</EditForm>

@code {
    private Reservation newReservation = new Reservation
        {
            ReservationDate = DateTime.Today,
            NumberOfPeople = 1,
            Preferences = "",
            TableId = 1 //zrob random

};

    private string timeString = DateTime.Now.ToString("HH:mm");
    private bool timeParsingError;

    private async Task CreateReservation()
    {
        var cookieValue = await JsRuntime.InvokeAsync<string>("getCookie", ["loggedInUser"]);

        if (!string.IsNullOrEmpty(cookieValue))
        {
            var user = JsonSerializer.Deserialize<User>(cookieValue);


            newReservation.UserId = user.Id;
        }

        if (!TimeSpan.TryParseExact(timeString, "hh\\:mm", CultureInfo.InvariantCulture, out TimeSpan parsedTime))
        {
            timeParsingError = true;
            return;
        }

        var dateTime = new DateTime(
            newReservation.ReservationDate.Year,
            newReservation.ReservationDate.Month,
            newReservation.ReservationDate.Day,
            parsedTime.Hours,
            parsedTime.Minutes,
            0
        );

        newReservation.ReservationDate = dateTime;

        var response = await Http.PostAsJsonAsync("http://localhost:14427/api/Reservation", newReservation);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/main");
        }
        else
        {
            Console.WriteLine("Failed to create reservation");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/main");
    }
}